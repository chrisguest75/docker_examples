package:
  name: nodejs-20
  version: 20.12.0
  epoch: 1
  description: "JavaScript runtime built on V8 engine - LTS version"
  dependencies:
    provides:
      - nodejs=${{package.full-version}}
      - nodejs-lts=${{package.full-version}}
  copyright:
    - license: MIT

environment:
  contents:
    packages:
      - brotli-dev
      - build-base
      - busybox
      - c-ares-dev
      - ca-certificates-bundle
      - icu-dev
      - libuv-dev
      - linux-headers
      - nghttp2-dev
      - openssl-dev
      - py3-jinja2
      - py3-setuptools
      - python3
      - samurai
      - wolfi-base
      - zlib-dev

pipeline:
  - uses: fetch
    with:
      uri: https://nodejs.org/dist/v${{package.version}}/node-v${{package.version}}.tar.gz
      expected-sha256: 6d81620a0d328ec3039184ad2f5a0fc340ed44a59e90947765567346671525e7

  - name: Configure and build
    runs: |
      # Add defines recommended in libuv readme.
      common_flags="-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

      # Compiling with O2 instead of Os increases binary size by ~10%
      # (53.1 MiB -> 58.6 MiB), but also increases performance by ~20%
      # according to v8/web-tooling-benchmark. Node.js is quite huge anyway;
      # there are better options for size constrained environments.
      export CFLAGS="${CFLAGS/-Os/-O2} $common_flags"
      export CXXFLAGS="${CXXFLAGS/-Os/-O2} $common_flags"
      export CPPFLAGS="${CPPFLAGS/-Os/-O2} $common_flags"
      python3 configure.py --prefix=/usr \
        --shared-brotli \
        --shared-zlib \
        --shared-openssl \
        --shared-cares \
        --shared-nghttp2 \
        --shared-libuv \
        --ninja \
        --openssl-use-def-ca-store \
        --with-icu-default-data-dir=$(icu-config --icudatadir) \
        --with-intl=system-icu \
        --openssl-conf-name=openssl_conf \
        --without-corepack

        make BUILDTYPE=Release -j$(nproc)

  - uses: autoconf/make

  - uses: autoconf/make-install

  - runs: |
      make DESTDIR="$${{targets.destdir}}" install

  - uses: strip

  # Get rid of the bundled npm, we don't need it.
  - runs: |
      rm -rf "${{targets.destdir}}"/usr/lib/node_modules
      rm "${{targets.destdir}}"/usr/bin/npm
      rm "${{targets.destdir}}"/usr/bin/npx

update:
  enabled: true
  github:
    identifier: nodejs/node
    strip-prefix: v
    use-tag: true
    tag-filter: v20.

test:
  pipeline:
    - runs: |
        node --version | grep ${{package.version}}
